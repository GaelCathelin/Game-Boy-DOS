INSTRUCTION(0x00, "NOP"         , 1, 0, "----", )
INSTRUCTION(0x01, "LD BC,$%X"   , 3, 0, "----", cpu->BC = operand)
INSTRUCTION(0x02, "LD (BC),A"   , 1, 1, "----", write(cpu->BC, cpu->A))
INSTRUCTION(0x03, "INC BC"      , 1, 1, "----", cpu->BC++)
INSTRUCTION(0x04, "INC B"       , 1, 0, "B0H-", cpu->B++; cpu->h = cpu->Bl == 0)
INSTRUCTION(0x05, "DEC B"       , 1, 0, "B1H-", cpu->B--; cpu->h = cpu->Bl == 0xF)
INSTRUCTION(0x06, "LD B,$%X"    , 2, 0, "----", cpu->B = operand)
INSTRUCTION(0x07, "RLCA"        , 1, 0, "000C", cpu->c = cpu->A >> 7; cpu->A = cpu->A << 1 | cpu->c)
INSTRUCTION(0x08, "LD($%X),SP"  , 3, 2, "----", writep(cpu->mem, operand, cpu->SP))
INSTRUCTION(0x09, "ADD HL,BC"   , 1, 1, "-0HC", cpu->HL += cpu->BC; cpu->c = cpu->HL < cpu->BC; cpu->h = (cpu->HL & 0xFFF) < (cpu->BC & 0xFFF))
INSTRUCTION(0x0A, "LD A,(BC)"   , 1, 1, "----", cpu->A = read(cpu->BC))
INSTRUCTION(0x0B, "DEC BC"      , 1, 1, "----", cpu->BC--)
INSTRUCTION(0x0C, "INC C"       , 1, 0, "C0H-", cpu->C++; cpu->h = cpu->Cl == 0)
INSTRUCTION(0x0D, "DEC C"       , 1, 0, "C1H-", cpu->C--; cpu->h = cpu->Cl == 0xF)
INSTRUCTION(0x0E, "LD C,$%X"    , 2, 0, "----", cpu->C = operand)
INSTRUCTION(0x0F, "RRCA"        , 1, 0, "000C", cpu->c = cpu->A & 1; cpu->A = cpu->A >> 1 | cpu->c << 7)

INSTRUCTION(0x10, "STOP"        , 1, 0, "----", *(uint16_t*)&cpu->mem->IO[0x03] = 0; cpu->stopped = true; incrTimers(cpu, breakAt - cpu->cycles + 1); return true)
INSTRUCTION(0x11, "LD DE,$%X"   , 3, 0, "----", cpu->DE = operand)
INSTRUCTION(0x12, "LD (DE),A"   , 1, 1, "----", write(cpu->DE, cpu->A))
INSTRUCTION(0x13, "INC DE"      , 1, 1, "----", cpu->DE++)
INSTRUCTION(0x14, "INC D"       , 1, 0, "D0H-", cpu->D++; cpu->h = cpu->Dl == 0)
INSTRUCTION(0x15, "DEC D"       , 1, 0, "D1H-", cpu->D--; cpu->h = cpu->Dl == 0xF)
INSTRUCTION(0x16, "LD D,$%X"    , 2, 0, "----", cpu->D = operand)
INSTRUCTION(0x17, "RLA"         , 1, 0, "000C", uint8_t tmp = cpu->A >> 7; cpu->A = cpu->A << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x18, "JR %hhd"     , 2, 1, "----", cpu->PC += (int8_t)operand)
INSTRUCTION(0x19, "ADD HL,DE"   , 1, 1, "-0HC", cpu->HL += cpu->DE; cpu->c = cpu->HL < cpu->DE; cpu->h = (cpu->HL & 0xFFF) < (cpu->DE & 0xFFF))
INSTRUCTION(0x1A, "LD A,(DE)"   , 1, 1, "----", cpu->A = read(cpu->DE))
INSTRUCTION(0x1B, "DEC DE"      , 1, 1, "----", cpu->DE--)
INSTRUCTION(0x1C, "INC E"       , 1, 0, "E0H-", cpu->E++; cpu->h = cpu->El == 0)
INSTRUCTION(0x1D, "DEC E"       , 1, 0, "E1H-", cpu->E--; cpu->h = cpu->El == 0xF)
INSTRUCTION(0x1E, "LD E,$%X"    , 2, 0, "----", cpu->E = operand)
INSTRUCTION(0x1F, "RRA"         , 1, 0, "000C", uint8_t tmp = cpu->A & 1; cpu->A = cpu->A >> 1 | cpu->c << 7; cpu->c = tmp)

INSTRUCTION(0x20, "JR NZ,%hd"   , 2, 0, "----", if (!cpu->z) {cpu->PC += (int8_t)operand; addCycles(1);})
INSTRUCTION(0x21, "LD HL,$%X"   , 3, 0, "----", cpu->HL = operand)
INSTRUCTION(0x22, "LD (HL+),A"  , 1, 1, "----", write(cpu->HL++, cpu->A))
INSTRUCTION(0x23, "INC HL"      , 1, 1, "----", cpu->HL++)
INSTRUCTION(0x24, "INC H"       , 1, 0, "H0H-", cpu->H++; cpu->h = cpu->Hl == 0)
INSTRUCTION(0x25, "DEC H"       , 1, 0, "H1H-", cpu->H--; cpu->h = cpu->Hl == 0xF)
INSTRUCTION(0x26, "LD H,$%X"    , 2, 0, "----", cpu->H = operand)
INSTRUCTION(0x27, "DAA"         , 1, 0, "A-0C", if (cpu->n) {if (cpu->c) cpu->Ah -= 0x6; if (cpu->h) cpu->A -= 0x6;} else {if (cpu->c || cpu->A > 0x99) {cpu->Ah += 0x6; cpu->c = 1;} if (cpu->h || cpu->Al > 0x9) cpu->A += 0x6;})
INSTRUCTION(0x28, "JR Z,%hhd"   , 2, 0, "----", if (cpu->z) {cpu->PC += (int8_t)operand; addCycles(1);})
INSTRUCTION(0x29, "ADD HL,HL"   , 1, 1, "-0HC", cpu->c = cpu->HL > 0x7FFF; cpu->h = (cpu->HL & 0xFFF) > 0x7FF; cpu->HL <<= 1)
INSTRUCTION(0x2A, "LD A,(HL+)"  , 1, 1, "----", cpu->A = read(cpu->HL++))
INSTRUCTION(0x2B, "DEC HL"      , 1, 1, "----", cpu->HL--)
INSTRUCTION(0x2C, "INC L"       , 1, 0, "L0H-", cpu->L++; cpu->h = cpu->Ll == 0)
INSTRUCTION(0x2D, "DEC L"       , 1, 0, "L1H-", cpu->L--; cpu->h = cpu->Ll == 0xF)
INSTRUCTION(0x2E, "LD L,$%X"    , 2, 0, "----", cpu->L = operand)
INSTRUCTION(0x2F, "CPL"         , 1, 0, "-11-", cpu->A = ~cpu->A)

INSTRUCTION(0x30, "JR NC,%hd"   , 2, 0, "----", if (!cpu->c) {cpu->PC += (int8_t)operand; addCycles(1);})
INSTRUCTION(0x31, "LD SP,$%X"   , 3, 0, "----", cpu->SP = operand)
INSTRUCTION(0x32, "LD (HL-),A"  , 1, 1, "----", write(cpu->HL--, cpu->A))
INSTRUCTION(0x33, "INC SP"      , 1, 1, "----", cpu->SP++)
INSTRUCTION(0x34, "INC (HL)"    , 1, 1, "M0H-", uint16_t tmp = read(cpu->HL) + 1; addCycles(1); write(cpu->HL, tmp); cpu->z = (tmp & 0xFF) == 0; cpu->h = (tmp & 0xF) == 0)
INSTRUCTION(0x35, "DEC (HL)"    , 1, 1, "M1H-", uint16_t tmp = read(cpu->HL) - 1; addCycles(1); write(cpu->HL, tmp); cpu->z = (tmp & 0xFF) == 0; cpu->h = (tmp & 0xF) == 0xF)
INSTRUCTION(0x36, "LD (HL),$%X" , 2, 1, "----", write(cpu->HL, operand))
INSTRUCTION(0x37, "SCF"         , 1, 0, "-001", )
INSTRUCTION(0x38, "JR C,%hhd"   , 2, 0, "----", if (cpu->c) {cpu->PC += (int8_t)operand; addCycles(1);})
INSTRUCTION(0x39, "ADD HL,SP"   , 1, 1, "-0HC", cpu->HL += cpu->SP; cpu->c = cpu->HL < cpu->SP; cpu->h = (cpu->HL & 0xFFF) < (cpu->SP & 0xFFF))
INSTRUCTION(0x3A, "LD A,(HL-)"  , 1, 1, "----", cpu->A = read(cpu->HL--))
INSTRUCTION(0x3B, "DEC SP"      , 1, 1, "----", cpu->SP--)
INSTRUCTION(0x3C, "INC A"       , 1, 0, "A0H-", cpu->A++; cpu->h = cpu->Al == 0)
INSTRUCTION(0x3D, "DEC A"       , 1, 0, "A1H-", cpu->A--; cpu->h = cpu->Al == 0xF)
INSTRUCTION(0x3E, "LD A,$%X"    , 2, 0, "----", cpu->A = operand)
INSTRUCTION(0x3F, "CCF"         , 1, 0, "-00C", cpu->c = !cpu->c)

INSTRUCTION(0x40, "LD B,B"      , 1, 0, "----", )
INSTRUCTION(0x41, "LD B,C"      , 1, 0, "----", cpu->B = cpu->C)
INSTRUCTION(0x42, "LD B,D"      , 1, 0, "----", cpu->B = cpu->D)
INSTRUCTION(0x43, "LD B,E"      , 1, 0, "----", cpu->B = cpu->E)
INSTRUCTION(0x44, "LD B,H"      , 1, 0, "----", cpu->B = cpu->H)
INSTRUCTION(0x45, "LD B,L"      , 1, 0, "----", cpu->B = cpu->L)
INSTRUCTION(0x46, "LD B,(HL)"   , 1, 1, "----", cpu->B = read(cpu->HL))
INSTRUCTION(0x47, "LD B,A"      , 1, 0, "----", cpu->B = cpu->A)
INSTRUCTION(0x48, "LD C,B"      , 1, 0, "----", cpu->C = cpu->B)
INSTRUCTION(0x49, "LD C,C"      , 1, 0, "----", )
INSTRUCTION(0x4A, "LD C,D"      , 1, 0, "----", cpu->C = cpu->D)
INSTRUCTION(0x4B, "LD C,E"      , 1, 0, "----", cpu->C = cpu->E)
INSTRUCTION(0x4C, "LD C,H"      , 1, 0, "----", cpu->C = cpu->H)
INSTRUCTION(0x4D, "LD C,L"      , 1, 0, "----", cpu->C = cpu->L)
INSTRUCTION(0x4E, "LD C,(HL)"   , 1, 1, "----", cpu->C = read(cpu->HL))
INSTRUCTION(0x4F, "LD C,A"      , 1, 0, "----", cpu->C = cpu->A)
INSTRUCTION(0x50, "LD D,B"      , 1, 0, "----", cpu->D = cpu->B)
INSTRUCTION(0x51, "LD D,C"      , 1, 0, "----", cpu->D = cpu->C)
INSTRUCTION(0x52, "LD D,D"      , 1, 0, "----", )
INSTRUCTION(0x53, "LD D,E"      , 1, 0, "----", cpu->D = cpu->E)
INSTRUCTION(0x54, "LD D,H"      , 1, 0, "----", cpu->D = cpu->H)
INSTRUCTION(0x55, "LD D,L"      , 1, 0, "----", cpu->D = cpu->L)
INSTRUCTION(0x56, "LD D,(HL)"   , 1, 1, "----", cpu->D = read(cpu->HL))
INSTRUCTION(0x57, "LD D,A"      , 1, 0, "----", cpu->D = cpu->A)
INSTRUCTION(0x58, "LD E,B"      , 1, 0, "----", cpu->E = cpu->B)
INSTRUCTION(0x59, "LD E,C"      , 1, 0, "----", cpu->E = cpu->C)
INSTRUCTION(0x5A, "LD E,D"      , 1, 0, "----", cpu->E = cpu->D)
INSTRUCTION(0x5B, "LD E,E"      , 1, 0, "----", )
INSTRUCTION(0x5C, "LD E,H"      , 1, 0, "----", cpu->E = cpu->H)
INSTRUCTION(0x5D, "LD E,L"      , 1, 0, "----", cpu->E = cpu->L)
INSTRUCTION(0x5E, "LD E,(HL)"   , 1, 1, "----", cpu->E = read(cpu->HL))
INSTRUCTION(0x5F, "LD E,A"      , 1, 0, "----", cpu->E = cpu->A)
INSTRUCTION(0x60, "LD H,B"      , 1, 0, "----", cpu->H = cpu->B)
INSTRUCTION(0x61, "LD H,C"      , 1, 0, "----", cpu->H = cpu->C)
INSTRUCTION(0x62, "LD H,D"      , 1, 0, "----", cpu->H = cpu->D)
INSTRUCTION(0x63, "LD H,E"      , 1, 0, "----", cpu->H = cpu->E)
INSTRUCTION(0x64, "LD H,H"      , 1, 0, "----", )
INSTRUCTION(0x65, "LD H,L"      , 1, 0, "----", cpu->H = cpu->L)
INSTRUCTION(0x66, "LD H,(HL)"   , 1, 1, "----", cpu->H = read(cpu->HL))
INSTRUCTION(0x67, "LD H,A"      , 1, 0, "----", cpu->H = cpu->A)
INSTRUCTION(0x68, "LD L,B"      , 1, 0, "----", cpu->L = cpu->B)
INSTRUCTION(0x69, "LD L,C"      , 1, 0, "----", cpu->L = cpu->C)
INSTRUCTION(0x6A, "LD L,D"      , 1, 0, "----", cpu->L = cpu->D)
INSTRUCTION(0x6B, "LD L,E"      , 1, 0, "----", cpu->L = cpu->E)
INSTRUCTION(0x6C, "LD L,H"      , 1, 0, "----", cpu->L = cpu->H)
INSTRUCTION(0x6D, "LD L,L"      , 1, 0, "----", )
INSTRUCTION(0x6E, "LD L,(HL)"   , 1, 1, "----", cpu->L = read(cpu->HL))
INSTRUCTION(0x6F, "LD L,A"      , 1, 0, "----", cpu->L = cpu->A)
INSTRUCTION(0x70, "LD (HL),B"   , 1, 1, "----", write(cpu->HL, cpu->B))
INSTRUCTION(0x71, "LD (HL),C"   , 1, 1, "----", write(cpu->HL, cpu->C))
INSTRUCTION(0x72, "LD (HL),D"   , 1, 1, "----", write(cpu->HL, cpu->D))
INSTRUCTION(0x73, "LD (HL),E"   , 1, 1, "----", write(cpu->HL, cpu->E))
INSTRUCTION(0x74, "LD (HL),H"   , 1, 1, "----", write(cpu->HL, cpu->H))
INSTRUCTION(0x75, "LD (HL),L"   , 1, 1, "----", write(cpu->HL, cpu->L))
INSTRUCTION(0x76, "HALT"        , 1, 0, "----", cpu->halted = true; incrTimers(cpu, breakAt - cpu->cycles + 1); return true)
INSTRUCTION(0x77, "LD (HL),A"   , 1, 1, "----", write(cpu->HL, cpu->A))
INSTRUCTION(0x78, "LD A,B"      , 1, 0, "----", cpu->A = cpu->B)
INSTRUCTION(0x79, "LD A,C"      , 1, 0, "----", cpu->A = cpu->C)
INSTRUCTION(0x7A, "LD A,D"      , 1, 0, "----", cpu->A = cpu->D)
INSTRUCTION(0x7B, "LD A,E"      , 1, 0, "----", cpu->A = cpu->E)
INSTRUCTION(0x7C, "LD A,H"      , 1, 0, "----", cpu->A = cpu->H)
INSTRUCTION(0x7D, "LD A,L"      , 1, 0, "----", cpu->A = cpu->L)
INSTRUCTION(0x7E, "LD A,(HL)"   , 1, 1, "----", cpu->A = read(cpu->HL))
INSTRUCTION(0x7F, "LD A,A"      , 1, 0, "----", )

INSTRUCTION(0x80, "ADD B"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Bl, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->B, &cpu->A))
INSTRUCTION(0x81, "ADD C"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Cl, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->C, &cpu->A))
INSTRUCTION(0x82, "ADD D"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Dl, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->D, &cpu->A))
INSTRUCTION(0x83, "ADD E"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->El, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->E, &cpu->A))
INSTRUCTION(0x84, "ADD H"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Hl, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->H, &cpu->A))
INSTRUCTION(0x85, "ADD L"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Ll, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->L, &cpu->A))
INSTRUCTION(0x86, "ADD (HL)"    , 1, 1, "A0HC", uint8_t tmp = read(cpu->HL); cpu->h = __builtin_add_overflow_p(cpu->Al, tmp & 0xF, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, tmp, &cpu->A))
INSTRUCTION(0x87, "ADD A"       , 1, 0, "A0HC", cpu->c = cpu->A > 0x7F; cpu->h = cpu->Al > 0x7; cpu->A <<= 1)

INSTRUCTION(0x88, "ADC B"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Bl + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->B + cpu->c, &cpu->A))
INSTRUCTION(0x89, "ADC C"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Cl + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->C + cpu->c, &cpu->A))
INSTRUCTION(0x8A, "ADC D"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Dl + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->D + cpu->c, &cpu->A))
INSTRUCTION(0x8B, "ADC E"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->El + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->E + cpu->c, &cpu->A))
INSTRUCTION(0x8C, "ADC H"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Hl + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->H + cpu->c, &cpu->A))
INSTRUCTION(0x8D, "ADC L"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Ll + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->L + cpu->c, &cpu->A))
INSTRUCTION(0x8E, "ADC (HL)"    , 1, 1, "A0HC", uint8_t tmp = read(cpu->HL); cpu->h = __builtin_add_overflow_p(cpu->Al, (tmp & 0xF) + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, tmp + cpu->c, &cpu->A))
INSTRUCTION(0x8F, "ADC A"       , 1, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, cpu->Al + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, cpu->A + cpu->c, &cpu->A))

INSTRUCTION(0x90, "SUB B"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Bl, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->B, &cpu->A))
INSTRUCTION(0x91, "SUB C"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Cl, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->C, &cpu->A))
INSTRUCTION(0x92, "SUB D"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Dl, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->D, &cpu->A))
INSTRUCTION(0x93, "SUB E"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->El, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->E, &cpu->A))
INSTRUCTION(0x94, "SUB H"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Hl, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->H, &cpu->A))
INSTRUCTION(0x95, "SUB L"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Ll, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->L, &cpu->A))
INSTRUCTION(0x96, "SUB (HL)"    , 1, 1, "A1HC", uint8_t tmp = read(cpu->HL); cpu->h = __builtin_sub_overflow_p(cpu->Al, tmp & 0xF, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, tmp, &cpu->A))
INSTRUCTION(0x97, "SUB A"       , 1, 0, "1100", cpu->A = 0)

INSTRUCTION(0x98, "SBC B"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Bl + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->B + cpu->c, &cpu->A))
INSTRUCTION(0x99, "SBC C"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Cl + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->C + cpu->c, &cpu->A))
INSTRUCTION(0x9A, "SBC D"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Dl + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->D + cpu->c, &cpu->A))
INSTRUCTION(0x9B, "SBC E"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->El + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->E + cpu->c, &cpu->A))
INSTRUCTION(0x9C, "SBC H"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Hl + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->H + cpu->c, &cpu->A))
INSTRUCTION(0x9D, "SBC L"       , 1, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, cpu->Ll + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, cpu->L + cpu->c, &cpu->A))
INSTRUCTION(0x9E, "SBC (HL)"    , 1, 1, "A1HC", uint8_t tmp = read(cpu->HL); cpu->h = __builtin_sub_overflow_p(cpu->Al, (tmp & 0xF) + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, tmp + cpu->c, &cpu->A))
INSTRUCTION(0x9F, "SBC A"       , 1, 0, "A1HC", cpu->A = -cpu->c; cpu->h = cpu->c)

INSTRUCTION(0xA0, "AND B"       , 1, 0, "A010", cpu->A &= cpu->B)
INSTRUCTION(0xA1, "AND C"       , 1, 0, "A010", cpu->A &= cpu->C)
INSTRUCTION(0xA2, "AND D"       , 1, 0, "A010", cpu->A &= cpu->D)
INSTRUCTION(0xA3, "AND E"       , 1, 0, "A010", cpu->A &= cpu->E)
INSTRUCTION(0xA4, "AND H"       , 1, 0, "A010", cpu->A &= cpu->H)
INSTRUCTION(0xA5, "AND L"       , 1, 0, "A010", cpu->A &= cpu->L)
INSTRUCTION(0xA6, "AND (HL)"    , 1, 1, "A010", cpu->A &= read(cpu->HL))
INSTRUCTION(0xA7, "AND A"       , 1, 0, "A010", )

INSTRUCTION(0xA8, "XOR B"       , 1, 0, "A000", cpu->A ^= cpu->B)
INSTRUCTION(0xA9, "XOR C"       , 1, 0, "A000", cpu->A ^= cpu->C)
INSTRUCTION(0xAA, "XOR D"       , 1, 0, "A000", cpu->A ^= cpu->D)
INSTRUCTION(0xAB, "XOR E"       , 1, 0, "A000", cpu->A ^= cpu->E)
INSTRUCTION(0xAC, "XOR H"       , 1, 0, "A000", cpu->A ^= cpu->H)
INSTRUCTION(0xAD, "XOR L"       , 1, 0, "A000", cpu->A ^= cpu->L)
INSTRUCTION(0xAE, "XOR (HL)"    , 1, 1, "A000", cpu->A ^= read(cpu->HL))
INSTRUCTION(0xAF, "XOR A"       , 1, 0, "1000", cpu->A = 0)

INSTRUCTION(0xB0, "OR B"        , 1, 0, "A000", cpu->A |= cpu->B)
INSTRUCTION(0xB1, "OR C"        , 1, 0, "A000", cpu->A |= cpu->C)
INSTRUCTION(0xB2, "OR D"        , 1, 0, "A000", cpu->A |= cpu->D)
INSTRUCTION(0xB3, "OR E"        , 1, 0, "A000", cpu->A |= cpu->E)
INSTRUCTION(0xB4, "OR H"        , 1, 0, "A000", cpu->A |= cpu->H)
INSTRUCTION(0xB5, "OR L"        , 1, 0, "A000", cpu->A |= cpu->L)
INSTRUCTION(0xB6, "OR (HL)"     , 1, 1, "A000", cpu->A |= read(cpu->HL))
INSTRUCTION(0xB7, "OR A"        , 1, 0, "A000", )

INSTRUCTION(0xB8, "CP B"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->B; cpu->c = cpu->A < cpu->B; cpu->h = cpu->Al < cpu->Bl)
INSTRUCTION(0xB9, "CP C"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->C; cpu->c = cpu->A < cpu->C; cpu->h = cpu->Al < cpu->Cl)
INSTRUCTION(0xBA, "CP D"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->D; cpu->c = cpu->A < cpu->D; cpu->h = cpu->Al < cpu->Dl)
INSTRUCTION(0xBB, "CP E"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->E; cpu->c = cpu->A < cpu->E; cpu->h = cpu->Al < cpu->El)
INSTRUCTION(0xBC, "CP H"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->H; cpu->c = cpu->A < cpu->H; cpu->h = cpu->Al < cpu->Hl)
INSTRUCTION(0xBD, "CP L"        , 1, 0, "Z1HC", cpu->z = cpu->A == cpu->L; cpu->c = cpu->A < cpu->L; cpu->h = cpu->Al < cpu->Ll)
INSTRUCTION(0xBE, "CP (HL)"     , 1, 1, "Z1HC", uint8_t tmp = read(cpu->HL); cpu->z = cpu->A == tmp; cpu->c = cpu->A < tmp; cpu->h = cpu->Al < (tmp & 0xF))
INSTRUCTION(0xBF, "CP A"        , 1, 0, "1100", )

INSTRUCTION(0xC0, "RET NZ"      , 1, 1, "----", if (!cpu->z) {cpu->PC = pop(); addCycles(3);})
INSTRUCTION(0xC1, "POP BC"      , 1, 2, "----", cpu->BC = pop())
INSTRUCTION(0xC2, "JP NZ,$%X"   , 3, 0, "----", if (!cpu->z) {cpu->PC = operand; addCycles(1);})
INSTRUCTION(0xC3, "JP $%X"      , 3, 1, "----", cpu->PC = operand)
INSTRUCTION(0xC4, "CALL NZ,$%X" , 3, 0, "----", if (!cpu->z) {push(cpu->PC); cpu->PC = operand; addCycles(3);})
INSTRUCTION(0xC5, "PUSH BC"     , 1, 3, "----", push(cpu->BC))
INSTRUCTION(0xC6, "ADD $%X"     , 2, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, operand & 0xF, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, (uint8_t)operand, &cpu->A))
INSTRUCTION(0xC7, "RST $00"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x00)
INSTRUCTION(0xC8, "RET Z"       , 1, 1, "----", if (cpu->z) {cpu->PC = pop(); addCycles(3);})
INSTRUCTION(0xC9, "RET"         , 1, 3, "----", cpu->PC = pop())
INSTRUCTION(0xCA, "JP Z,$%X"    , 3, 0, "----", if (cpu->z) {cpu->PC = operand; addCycles(1);})
INSTRUCTION(0xCB, "PREFIX CB"   , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xCC, "CALL Z,$%X"  , 3, 0, "----", if (cpu->z) {push(cpu->PC); cpu->PC = operand; addCycles(3);})
INSTRUCTION(0xCD, "CALL $%X"    , 3, 3, "----", push(cpu->PC); cpu->PC = operand)
INSTRUCTION(0xCE, "ADC $%X"     , 2, 0, "A0HC", cpu->h = __builtin_add_overflow_p(cpu->Al, (operand & 0xF) + cpu->c, cpu->Al); cpu->c = __builtin_add_overflow(cpu->A, (uint8_t)operand + cpu->c, &cpu->A))
INSTRUCTION(0xCF, "RST $08"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x08)

INSTRUCTION(0xD0, "RET NC"      , 1, 1, "----", if (!cpu->c) {cpu->PC = pop(); addCycles(3);})
INSTRUCTION(0xD1, "POP DE"      , 1, 2, "----", cpu->DE = pop())
INSTRUCTION(0xD2, "JP NC,$%X"   , 3, 0, "----", if (!cpu->c) {cpu->PC = operand; addCycles(1);})
INSTRUCTION(0xD3, "WHILE $%X"   , 2,60, "----", cpu->A = cpu->mem->IO[(uint8_t)operand]; cpu->z = cpu->A == 0; cpu->n = 0; cpu->h = 1; cpu->c = 0; if (cpu->z) {cpu->PC -= 2; addCycles(1);})
INSTRUCTION(0xD4, "CALL NC,$%X" , 3, 0, "----", if (!cpu->c) {push(cpu->PC); cpu->PC = operand; addCycles(3);})
INSTRUCTION(0xD5, "PUSH DE"     , 1, 3, "----", push(cpu->DE))
INSTRUCTION(0xD6, "SUB $%X"     , 2, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, operand & 0xF, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, (uint8_t)operand, &cpu->A))
INSTRUCTION(0xD7, "RST $10"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x10)
INSTRUCTION(0xD8, "RET C"       , 1, 1, "----", if (cpu->c) {cpu->PC = pop(); addCycles(3);})
INSTRUCTION(0xD9, "RETI"        , 1, 3, "----", cpu->IME = 1; cpu->PC = pop())
INSTRUCTION(0xDA, "JP C,$%X"    , 3, 0, "----", if (cpu->c) {cpu->PC = operand; addCycles(1);})
INSTRUCTION(0xDB, "WHILE (HL)"  , 1,18, "----", uint8_t tmp = read(cpu->HL); cpu->z = cpu->A == tmp; cpu->n = 1; cpu->h = cpu->Al < (tmp & 0xF); cpu->c = cpu->A < tmp; if (!cpu->z) {cpu->PC -= 1; addCycles(1);})
INSTRUCTION(0xDC, "CALL C,$%X"  , 3, 0, "----", if (cpu->c) {push(cpu->PC); cpu->PC = operand; addCycles(3);})
INSTRUCTION(0xDD, "WHILE $%X"   , 3,113,"----", cpu->A = read(operand); cpu->z = cpu->A == 0; cpu->n = 0; cpu->h = 1; cpu->c = 0; if (cpu->z) {cpu->PC -= 3; addCycles(1);})
INSTRUCTION(0xDE, "SBC $%X"     , 2, 0, "A1HC", cpu->h = __builtin_sub_overflow_p(cpu->Al, (operand & 0xF) + cpu->c, cpu->Al); cpu->c = __builtin_sub_overflow(cpu->A, (uint8_t)operand + cpu->c, &cpu->A))
INSTRUCTION(0xDF, "RST $18"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x18)

INSTRUCTION(0xE0, "LDH ($%X),A" , 2, 1, "----", write(0xFF00 | operand, cpu->A))
INSTRUCTION(0xE1, "POP HL"      , 1, 2, "----", cpu->HL = pop())
INSTRUCTION(0xE2, "LDH (C),A"   , 1, 1, "----", write(0xFF00 | cpu->C, cpu->A))
INSTRUCTION(0xE3, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xE4, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xE5, "PUSH HL"     , 1, 3, "----", push(cpu->HL))
INSTRUCTION(0xE6, "AND $%X"     , 2, 0, "A010", cpu->A &= operand)
INSTRUCTION(0xE7, "RST $20"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x20)
INSTRUCTION(0xE8, "ADD SP,$%X"  , 2, 2, "00HC", int16_t tmp = cpu->SP + (int8_t)operand; cpu->c = (tmp & 0xFF) < (cpu->SP & 0xFF); cpu->h = (tmp & 0xF) < (cpu->SP & 0xF); cpu->SP = tmp)
INSTRUCTION(0xE9, "JP HL"       , 1, 0, "----", cpu->PC = cpu->HL)
INSTRUCTION(0xEA, "LD ($%X),A"  , 3, 1, "----", write(operand, cpu->A))
INSTRUCTION(0xEB, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xEC, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xED, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xEE, "XOR $%X"     , 2, 0, "A000", cpu->A ^= operand)
INSTRUCTION(0xEF, "RST $28"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x28)

INSTRUCTION(0xF0, "LDH A,($%X)" , 2, 1, "----", cpu->A = cpu->mem->IO[(uint8_t)operand])
INSTRUCTION(0xF1, "POP AF"      , 1, 2, "ZNHC", cpu->AF = pop(); cpu->_unused = 0)
INSTRUCTION(0xF2, "LDH A,(C)"   , 1, 1, "----", cpu->A = cpu->mem->IO[cpu->C])
INSTRUCTION(0xF3, "DI"          , 1, 0, "----", cpu->IME = 0)
INSTRUCTION(0xF4, "PAUSE"       , 1, 0, "----", incrTimers(cpu, breakAt - cpu->cycles + 1); return true)
INSTRUCTION(0xF5, "PUSH AF"     , 1, 3, "----", push(cpu->AF))
INSTRUCTION(0xF6, "OR $%X"      , 2, 0, "A000", cpu->A |= operand)
INSTRUCTION(0xF7, "RST $30"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x30)
INSTRUCTION(0xF8, "LD HL,SP+$%X", 2, 1, "00HC", int16_t tmp = cpu->SP + (int8_t)operand; cpu->c = (tmp & 0xFF) < (cpu->SP & 0xFF); cpu->h = (tmp & 0xF) < (cpu->SP & 0xF); cpu->HL = tmp)
INSTRUCTION(0xF9, "LD SP,HL"    , 1, 1, "----", cpu->SP = cpu->HL)
INSTRUCTION(0xFA, "LD A,($%X)"  , 3, 1, "----", cpu->A = read(operand))
INSTRUCTION(0xFB, "EI"          , 1, 0, "----", cpu->IME = 2)
INSTRUCTION(0xFC, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xFD, ""            , 1, 0, "----", UNREACHABLE)
INSTRUCTION(0xFE, "CP $%X"      , 2, 0, "Z1HC", cpu->z = cpu->A == (uint8_t)operand; cpu->c = cpu->A < (uint8_t)operand; cpu->h = cpu->Al < (operand & 0xF))
INSTRUCTION(0xFF, "RST $38"     , 1, 3, "----", push(cpu->PC); cpu->PC = 0x38)

INSTRUCTION(0x100, "RLC B"      , 2, 0, "B00C", cpu->c = cpu->B >> 7; cpu->B = cpu->B << 1 | cpu->c)
INSTRUCTION(0x101, "RLC C"      , 2, 0, "C00C", cpu->c = cpu->C >> 7; cpu->C = cpu->C << 1 | cpu->c)
INSTRUCTION(0x102, "RLC D"      , 2, 0, "D00C", cpu->c = cpu->D >> 7; cpu->D = cpu->D << 1 | cpu->c)
INSTRUCTION(0x103, "RLC E"      , 2, 0, "E00C", cpu->c = cpu->E >> 7; cpu->E = cpu->E << 1 | cpu->c)
INSTRUCTION(0x104, "RLC H"      , 2, 0, "H00C", cpu->c = cpu->H >> 7; cpu->H = cpu->H << 1 | cpu->c)
INSTRUCTION(0x105, "RLC L"      , 2, 0, "L00C", cpu->c = cpu->L >> 7; cpu->L = cpu->L << 1 | cpu->c)
INSTRUCTION(0x106, "RLC (HL)"   , 2, 1, "M00C", uint8_t tmp = read(cpu->HL); addCycles(1); cpu->c = tmp >> 7; write(cpu->HL, tmp = tmp << 1 | cpu->c); cpu->z = tmp == 0)
INSTRUCTION(0x107, "RLC A"      , 2, 0, "A00C", cpu->c = cpu->A >> 7; cpu->A = cpu->A << 1 | cpu->c)

INSTRUCTION(0x108, "RRC B"      , 2, 0, "B00C", cpu->c = cpu->B; cpu->B = cpu->B >> 1 | cpu->c << 7)
INSTRUCTION(0x109, "RRC C"      , 2, 0, "C00C", cpu->c = cpu->C; cpu->C = cpu->C >> 1 | cpu->c << 7)
INSTRUCTION(0x10A, "RRC D"      , 2, 0, "D00C", cpu->c = cpu->D; cpu->D = cpu->D >> 1 | cpu->c << 7)
INSTRUCTION(0x10B, "RRC E"      , 2, 0, "E00C", cpu->c = cpu->E; cpu->E = cpu->E >> 1 | cpu->c << 7)
INSTRUCTION(0x10C, "RRC H"      , 2, 0, "H00C", cpu->c = cpu->H; cpu->H = cpu->H >> 1 | cpu->c << 7)
INSTRUCTION(0x10D, "RRC L"      , 2, 0, "L00C", cpu->c = cpu->L; cpu->L = cpu->L >> 1 | cpu->c << 7)
INSTRUCTION(0x10E, "RRC (HL)"   , 2, 1, "M00C", uint8_t tmp = read(cpu->HL); addCycles(1); cpu->c = tmp; write(cpu->HL, tmp = tmp >> 1 | cpu->c << 7); cpu->z = tmp == 0)
INSTRUCTION(0x10F, "RRC A"      , 2, 0, "A00C", cpu->c = cpu->A; cpu->A = cpu->A >> 1 | cpu->c << 7)

INSTRUCTION(0x110, "RL B"       , 2, 0, "B00C", uint8_t tmp = cpu->B >> 7; cpu->B = cpu->B << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x111, "RL C"       , 2, 0, "C00C", uint8_t tmp = cpu->C >> 7; cpu->C = cpu->C << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x112, "RL D"       , 2, 0, "D00C", uint8_t tmp = cpu->D >> 7; cpu->D = cpu->D << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x113, "RL E"       , 2, 0, "E00C", uint8_t tmp = cpu->E >> 7; cpu->E = cpu->E << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x114, "RL H"       , 2, 0, "H00C", uint8_t tmp = cpu->H >> 7; cpu->H = cpu->H << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x115, "RL L"       , 2, 0, "L00C", uint8_t tmp = cpu->L >> 7; cpu->L = cpu->L << 1 | cpu->c; cpu->c = tmp)
INSTRUCTION(0x116, "RL (HL)"    , 2, 1, "M00C", uint16_t tmp = read(cpu->HL); addCycles(1); write(cpu->HL, tmp = tmp << 1 | cpu->c); cpu->c = tmp >> 8; cpu->z = (tmp & 0xFF) == 0)
INSTRUCTION(0x117, "RL A"       , 2, 0, "A00C", uint8_t tmp = cpu->A >> 7; cpu->A = cpu->A << 1 | cpu->c; cpu->c = tmp)

INSTRUCTION(0x118, "RR B"       , 2, 0, "B00C", uint8_t tmp = cpu->B & 1; cpu->B = cpu->B >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x119, "RR C"       , 2, 0, "C00C", uint8_t tmp = cpu->C & 1; cpu->C = cpu->C >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x11A, "RR D"       , 2, 0, "D00C", uint8_t tmp = cpu->D & 1; cpu->D = cpu->D >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x11B, "RR E"       , 2, 0, "E00C", uint8_t tmp = cpu->E & 1; cpu->E = cpu->E >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x11C, "RR H"       , 2, 0, "H00C", uint8_t tmp = cpu->H & 1; cpu->H = cpu->H >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x11D, "RR L"       , 2, 0, "L00C", uint8_t tmp = cpu->L & 1; cpu->L = cpu->L >> 1 | cpu->c << 7; cpu->c = tmp)
INSTRUCTION(0x11E, "RR (HL)"    , 2, 1, "M00C", uint16_t tmp = read(cpu->HL); addCycles(1); write(cpu->HL, (tmp |= cpu->c << 8) >> 1); cpu->c = tmp; cpu->z = (tmp & 0x1FE) == 0)
INSTRUCTION(0x11F, "RR A"       , 2, 0, "A00C", uint8_t tmp = cpu->A & 1; cpu->A = cpu->A >> 1 | cpu->c << 7; cpu->c = tmp)

INSTRUCTION(0x120, "SLA B"      , 2, 0, "B00C", cpu->c = cpu->B >> 7; cpu->B <<= 1)
INSTRUCTION(0x121, "SLA C"      , 2, 0, "C00C", cpu->c = cpu->C >> 7; cpu->C <<= 1)
INSTRUCTION(0x122, "SLA D"      , 2, 0, "D00C", cpu->c = cpu->D >> 7; cpu->D <<= 1)
INSTRUCTION(0x123, "SLA E"      , 2, 0, "E00C", cpu->c = cpu->E >> 7; cpu->E <<= 1)
INSTRUCTION(0x124, "SLA H"      , 2, 0, "H00C", cpu->c = cpu->H >> 7; cpu->H <<= 1)
INSTRUCTION(0x125, "SLA L"      , 2, 0, "L00C", cpu->c = cpu->L >> 7; cpu->L <<= 1)
INSTRUCTION(0x126, "SLA (HL)"   , 2, 1, "M00C", uint8_t tmp = read(cpu->HL); addCycles(1); cpu->c = tmp >> 7; write(cpu->HL, tmp <<= 1); cpu->z = tmp == 0)
INSTRUCTION(0x127, "SLA A"      , 2, 0, "A00C", cpu->c = cpu->A >> 7; cpu->A <<= 1)

INSTRUCTION(0x128, "SRA B"      , 2, 0, "B00C", cpu->c = cpu->B & 1; cpu->B = cpu->B >> 1 | (cpu->B & 0x80))
INSTRUCTION(0x129, "SRA C"      , 2, 0, "C00C", cpu->c = cpu->C & 1; cpu->C = cpu->C >> 1 | (cpu->C & 0x80))
INSTRUCTION(0x12A, "SRA D"      , 2, 0, "D00C", cpu->c = cpu->D & 1; cpu->D = cpu->D >> 1 | (cpu->D & 0x80))
INSTRUCTION(0x12B, "SRA E"      , 2, 0, "E00C", cpu->c = cpu->E & 1; cpu->E = cpu->E >> 1 | (cpu->E & 0x80))
INSTRUCTION(0x12C, "SRA H"      , 2, 0, "H00C", cpu->c = cpu->H & 1; cpu->H = cpu->H >> 1 | (cpu->H & 0x80))
INSTRUCTION(0x12D, "SRA L"      , 2, 0, "L00C", cpu->c = cpu->L & 1; cpu->L = cpu->L >> 1 | (cpu->L & 0x80))
INSTRUCTION(0x12E, "SRA (HL)"   , 2, 1, "M00C", uint8_t tmp = read(cpu->HL); addCycles(1); cpu->c = tmp & 1; write(cpu->HL, tmp = tmp >> 1 | (tmp & 0x80)); cpu->z = tmp == 0)
INSTRUCTION(0x12F, "SRA A"      , 2, 0, "A00C", cpu->c = cpu->A & 1; cpu->A = cpu->A >> 1 | (cpu->A & 0x80))

INSTRUCTION(0x130, "SWAP B"     , 2, 0, "B000", uint8_t tmp = cpu->B; cpu->B <<= 4; cpu->B |= tmp >> 4)
INSTRUCTION(0x131, "SWAP C"     , 2, 0, "C000", uint8_t tmp = cpu->C; cpu->C <<= 4; cpu->C |= tmp >> 4)
INSTRUCTION(0x132, "SWAP D"     , 2, 0, "D000", uint8_t tmp = cpu->D; cpu->D <<= 4; cpu->D |= tmp >> 4)
INSTRUCTION(0x133, "SWAP E"     , 2, 0, "E000", uint8_t tmp = cpu->E; cpu->E <<= 4; cpu->E |= tmp >> 4)
INSTRUCTION(0x134, "SWAP H"     , 2, 0, "H000", uint8_t tmp = cpu->H; cpu->H <<= 4; cpu->H |= tmp >> 4)
INSTRUCTION(0x135, "SWAP L"     , 2, 0, "L000", uint8_t tmp = cpu->L; cpu->L <<= 4; cpu->L |= tmp >> 4)
INSTRUCTION(0x136, "SWAP (HL)"  , 2, 1, "M000", uint8_t tmp = read(cpu->HL); addCycles(1); write(cpu->HL, tmp = tmp << 4 | tmp >> 4); cpu->z = tmp == 0)
INSTRUCTION(0x137, "SWAP A"     , 2, 0, "A000", uint8_t tmp = cpu->A; cpu->A <<= 4; cpu->A |= tmp >> 4)

INSTRUCTION(0x138, "SRL B"      , 2, 0, "B00C", cpu->c = cpu->B & 1; cpu->B >>= 1;)
INSTRUCTION(0x139, "SRL C"      , 2, 0, "C00C", cpu->c = cpu->C & 1; cpu->C >>= 1;)
INSTRUCTION(0x13A, "SRL D"      , 2, 0, "D00C", cpu->c = cpu->D & 1; cpu->D >>= 1;)
INSTRUCTION(0x13B, "SRL E"      , 2, 0, "E00C", cpu->c = cpu->E & 1; cpu->E >>= 1;)
INSTRUCTION(0x13C, "SRL H"      , 2, 0, "H00C", cpu->c = cpu->H & 1; cpu->H >>= 1;)
INSTRUCTION(0x13D, "SRL L"      , 2, 0, "L00C", cpu->c = cpu->L & 1; cpu->L >>= 1;)
INSTRUCTION(0x13E, "SRL (HL)"   , 2, 1, "M00C", uint8_t tmp = read(cpu->HL); addCycles(1); cpu->c = tmp & 1; write(cpu->HL, tmp >>= 1); cpu->z = tmp == 0)
INSTRUCTION(0x13F, "SRL A"      , 2, 0, "A00C", cpu->c = cpu->A & 1; cpu->A >>= 1;)

INSTRUCTION(0x140, "BIT 0,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 0)
INSTRUCTION(0x141, "BIT 0,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 0)
INSTRUCTION(0x142, "BIT 0,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 0)
INSTRUCTION(0x143, "BIT 0,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 0)
INSTRUCTION(0x144, "BIT 0,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 0)
INSTRUCTION(0x145, "BIT 0,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 0)
INSTRUCTION(0x146, "BIT 0,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 0)
INSTRUCTION(0x147, "BIT 0,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 0)
INSTRUCTION(0x148, "BIT 1,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 1)
INSTRUCTION(0x149, "BIT 1,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 1)
INSTRUCTION(0x14A, "BIT 1,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 1)
INSTRUCTION(0x14B, "BIT 1,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 1)
INSTRUCTION(0x14C, "BIT 1,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 1)
INSTRUCTION(0x14D, "BIT 1,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 1)
INSTRUCTION(0x14E, "BIT 1,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 1)
INSTRUCTION(0x14F, "BIT 1,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 1)
INSTRUCTION(0x150, "BIT 2,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 2)
INSTRUCTION(0x151, "BIT 2,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 2)
INSTRUCTION(0x152, "BIT 2,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 2)
INSTRUCTION(0x153, "BIT 2,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 2)
INSTRUCTION(0x154, "BIT 2,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 2)
INSTRUCTION(0x155, "BIT 2,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 2)
INSTRUCTION(0x156, "BIT 2,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 2)
INSTRUCTION(0x157, "BIT 2,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 2)
INSTRUCTION(0x158, "BIT 3,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 3)
INSTRUCTION(0x159, "BIT 3,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 3)
INSTRUCTION(0x15A, "BIT 3,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 3)
INSTRUCTION(0x15B, "BIT 3,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 3)
INSTRUCTION(0x15C, "BIT 3,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 3)
INSTRUCTION(0x15D, "BIT 3,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 3)
INSTRUCTION(0x15E, "BIT 3,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 3)
INSTRUCTION(0x15F, "BIT 3,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 3)
INSTRUCTION(0x160, "BIT 4,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 4)
INSTRUCTION(0x161, "BIT 4,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 4)
INSTRUCTION(0x162, "BIT 4,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 4)
INSTRUCTION(0x163, "BIT 4,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 4)
INSTRUCTION(0x164, "BIT 4,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 4)
INSTRUCTION(0x165, "BIT 4,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 4)
INSTRUCTION(0x166, "BIT 4,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 4)
INSTRUCTION(0x167, "BIT 4,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 4)
INSTRUCTION(0x168, "BIT 5,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 5)
INSTRUCTION(0x169, "BIT 5,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 5)
INSTRUCTION(0x16A, "BIT 5,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 5)
INSTRUCTION(0x16B, "BIT 5,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 5)
INSTRUCTION(0x16C, "BIT 5,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 5)
INSTRUCTION(0x16D, "BIT 5,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 5)
INSTRUCTION(0x16E, "BIT 5,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 5)
INSTRUCTION(0x16F, "BIT 5,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 5)
INSTRUCTION(0x170, "BIT 6,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 6)
INSTRUCTION(0x171, "BIT 6,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 6)
INSTRUCTION(0x172, "BIT 6,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 6)
INSTRUCTION(0x173, "BIT 6,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 6)
INSTRUCTION(0x174, "BIT 6,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 6)
INSTRUCTION(0x175, "BIT 6,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 6)
INSTRUCTION(0x176, "BIT 6,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 6)
INSTRUCTION(0x177, "BIT 6,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 6)
INSTRUCTION(0x178, "BIT 7,B"    , 2, 0, "Z01-", cpu->z = ~cpu->B        >> 7)
INSTRUCTION(0x179, "BIT 7,C"    , 2, 0, "Z01-", cpu->z = ~cpu->C        >> 7)
INSTRUCTION(0x17A, "BIT 7,D"    , 2, 0, "Z01-", cpu->z = ~cpu->D        >> 7)
INSTRUCTION(0x17B, "BIT 7,E"    , 2, 0, "Z01-", cpu->z = ~cpu->E        >> 7)
INSTRUCTION(0x17C, "BIT 7,H"    , 2, 0, "Z01-", cpu->z = ~cpu->H        >> 7)
INSTRUCTION(0x17D, "BIT 7,L"    , 2, 0, "Z01-", cpu->z = ~cpu->L        >> 7)
INSTRUCTION(0x17E, "BIT 7,(HL)" , 2, 1, "Z01-", cpu->z = ~read(cpu->HL) >> 7)
INSTRUCTION(0x17F, "BIT 7,A"    , 2, 0, "Z01-", cpu->z = ~cpu->A        >> 7)

INSTRUCTION(0x180, "RES 0,B"    , 2, 0, "----", cpu->B &= ~(1 << 0))
INSTRUCTION(0x181, "RES 0,C"    , 2, 0, "----", cpu->C &= ~(1 << 0))
INSTRUCTION(0x182, "RES 0,D"    , 2, 0, "----", cpu->D &= ~(1 << 0))
INSTRUCTION(0x183, "RES 0,E"    , 2, 0, "----", cpu->E &= ~(1 << 0))
INSTRUCTION(0x184, "RES 0,H"    , 2, 0, "----", cpu->H &= ~(1 << 0))
INSTRUCTION(0x185, "RES 0,L"    , 2, 0, "----", cpu->L &= ~(1 << 0))
INSTRUCTION(0x186, "RES 0,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 0); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x187, "RES 0,A"    , 2, 0, "----", cpu->A &= ~(1 << 0))
INSTRUCTION(0x188, "RES 1,B"    , 2, 0, "----", cpu->B &= ~(1 << 1))
INSTRUCTION(0x189, "RES 1,C"    , 2, 0, "----", cpu->C &= ~(1 << 1))
INSTRUCTION(0x18A, "RES 1,D"    , 2, 0, "----", cpu->D &= ~(1 << 1))
INSTRUCTION(0x18B, "RES 1,E"    , 2, 0, "----", cpu->E &= ~(1 << 1))
INSTRUCTION(0x18C, "RES 1,H"    , 2, 0, "----", cpu->H &= ~(1 << 1))
INSTRUCTION(0x18D, "RES 1,L"    , 2, 0, "----", cpu->L &= ~(1 << 1))
INSTRUCTION(0x18E, "RES 1,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 1); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x18F, "RES 1,A"    , 2, 0, "----", cpu->A &= ~(1 << 1))
INSTRUCTION(0x190, "RES 2,B"    , 2, 0, "----", cpu->B &= ~(1 << 2))
INSTRUCTION(0x191, "RES 2,C"    , 2, 0, "----", cpu->C &= ~(1 << 2))
INSTRUCTION(0x192, "RES 2,D"    , 2, 0, "----", cpu->D &= ~(1 << 2))
INSTRUCTION(0x193, "RES 2,E"    , 2, 0, "----", cpu->E &= ~(1 << 2))
INSTRUCTION(0x194, "RES 2,H"    , 2, 0, "----", cpu->H &= ~(1 << 2))
INSTRUCTION(0x195, "RES 2,L"    , 2, 0, "----", cpu->L &= ~(1 << 2))
INSTRUCTION(0x196, "RES 2,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 2); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x197, "RES 2,A"    , 2, 0, "----", cpu->A &= ~(1 << 2))
INSTRUCTION(0x198, "RES 3,B"    , 2, 0, "----", cpu->B &= ~(1 << 3))
INSTRUCTION(0x199, "RES 3,C"    , 2, 0, "----", cpu->C &= ~(1 << 3))
INSTRUCTION(0x19A, "RES 3,D"    , 2, 0, "----", cpu->D &= ~(1 << 3))
INSTRUCTION(0x19B, "RES 3,E"    , 2, 0, "----", cpu->E &= ~(1 << 3))
INSTRUCTION(0x19C, "RES 3,H"    , 2, 0, "----", cpu->H &= ~(1 << 3))
INSTRUCTION(0x19D, "RES 3,L"    , 2, 0, "----", cpu->L &= ~(1 << 3))
INSTRUCTION(0x19E, "RES 3,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 3); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x19F, "RES 3,A"    , 2, 0, "----", cpu->A &= ~(1 << 3))
INSTRUCTION(0x1A0, "RES 4,B"    , 2, 0, "----", cpu->B &= ~(1 << 4))
INSTRUCTION(0x1A1, "RES 4,C"    , 2, 0, "----", cpu->C &= ~(1 << 4))
INSTRUCTION(0x1A2, "RES 4,D"    , 2, 0, "----", cpu->D &= ~(1 << 4))
INSTRUCTION(0x1A3, "RES 4,E"    , 2, 0, "----", cpu->E &= ~(1 << 4))
INSTRUCTION(0x1A4, "RES 4,H"    , 2, 0, "----", cpu->H &= ~(1 << 4))
INSTRUCTION(0x1A5, "RES 4,L"    , 2, 0, "----", cpu->L &= ~(1 << 4))
INSTRUCTION(0x1A6, "RES 4,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 4); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1A7, "RES 4,A"    , 2, 0, "----", cpu->A &= ~(1 << 4))
INSTRUCTION(0x1A8, "RES 5,B"    , 2, 0, "----", cpu->B &= ~(1 << 5))
INSTRUCTION(0x1A9, "RES 5,C"    , 2, 0, "----", cpu->C &= ~(1 << 5))
INSTRUCTION(0x1AA, "RES 5,D"    , 2, 0, "----", cpu->D &= ~(1 << 5))
INSTRUCTION(0x1AB, "RES 5,E"    , 2, 0, "----", cpu->E &= ~(1 << 5))
INSTRUCTION(0x1AC, "RES 5,H"    , 2, 0, "----", cpu->H &= ~(1 << 5))
INSTRUCTION(0x1AD, "RES 5,L"    , 2, 0, "----", cpu->L &= ~(1 << 5))
INSTRUCTION(0x1AE, "RES 5,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 5); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1AF, "RES 5,A"    , 2, 0, "----", cpu->A &= ~(1 << 5))
INSTRUCTION(0x1B0, "RES 6,B"    , 2, 0, "----", cpu->B &= ~(1 << 6))
INSTRUCTION(0x1B1, "RES 6,C"    , 2, 0, "----", cpu->C &= ~(1 << 6))
INSTRUCTION(0x1B2, "RES 6,D"    , 2, 0, "----", cpu->D &= ~(1 << 6))
INSTRUCTION(0x1B3, "RES 6,E"    , 2, 0, "----", cpu->E &= ~(1 << 6))
INSTRUCTION(0x1B4, "RES 6,H"    , 2, 0, "----", cpu->H &= ~(1 << 6))
INSTRUCTION(0x1B5, "RES 6,L"    , 2, 0, "----", cpu->L &= ~(1 << 6))
INSTRUCTION(0x1B6, "RES 6,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 6); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1B7, "RES 6,A"    , 2, 0, "----", cpu->A &= ~(1 << 6))
INSTRUCTION(0x1B8, "RES 7,B"    , 2, 0, "----", cpu->B &= ~(1 << 7))
INSTRUCTION(0x1B9, "RES 7,C"    , 2, 0, "----", cpu->C &= ~(1 << 7))
INSTRUCTION(0x1BA, "RES 7,D"    , 2, 0, "----", cpu->D &= ~(1 << 7))
INSTRUCTION(0x1BB, "RES 7,E"    , 2, 0, "----", cpu->E &= ~(1 << 7))
INSTRUCTION(0x1BC, "RES 7,H"    , 2, 0, "----", cpu->H &= ~(1 << 7))
INSTRUCTION(0x1BD, "RES 7,L"    , 2, 0, "----", cpu->L &= ~(1 << 7))
INSTRUCTION(0x1BE, "RES 7,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) & ~(1 << 7); addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1BF, "RES 7,A"    , 2, 0, "----", cpu->A &= ~(1 << 7))

INSTRUCTION(0x1C0, "SET 0,B"    , 2, 0, "----", cpu->B |= 1 << 0)
INSTRUCTION(0x1C1, "SET 0,C"    , 2, 0, "----", cpu->C |= 1 << 0)
INSTRUCTION(0x1C2, "SET 0,D"    , 2, 0, "----", cpu->D |= 1 << 0)
INSTRUCTION(0x1C3, "SET 0,E"    , 2, 0, "----", cpu->E |= 1 << 0)
INSTRUCTION(0x1C4, "SET 0,H"    , 2, 0, "----", cpu->H |= 1 << 0)
INSTRUCTION(0x1C5, "SET 0,L"    , 2, 0, "----", cpu->L |= 1 << 0)
INSTRUCTION(0x1C6, "SET 0,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 0; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1C7, "SET 0,A"    , 2, 0, "----", cpu->A |= 1 << 0)
INSTRUCTION(0x1C8, "SET 1,B"    , 2, 0, "----", cpu->B |= 1 << 1)
INSTRUCTION(0x1C9, "SET 1,C"    , 2, 0, "----", cpu->C |= 1 << 1)
INSTRUCTION(0x1CA, "SET 1,D"    , 2, 0, "----", cpu->D |= 1 << 1)
INSTRUCTION(0x1CB, "SET 1,E"    , 2, 0, "----", cpu->E |= 1 << 1)
INSTRUCTION(0x1CC, "SET 1,H"    , 2, 0, "----", cpu->H |= 1 << 1)
INSTRUCTION(0x1CD, "SET 1,L"    , 2, 0, "----", cpu->L |= 1 << 1)
INSTRUCTION(0x1CE, "SET 1,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 1; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1CF, "SET 1,A"    , 2, 0, "----", cpu->A |= 1 << 1)
INSTRUCTION(0x1D0, "SET 2,B"    , 2, 0, "----", cpu->B |= 1 << 2)
INSTRUCTION(0x1D1, "SET 2,C"    , 2, 0, "----", cpu->C |= 1 << 2)
INSTRUCTION(0x1D2, "SET 2,D"    , 2, 0, "----", cpu->D |= 1 << 2)
INSTRUCTION(0x1D3, "SET 2,E"    , 2, 0, "----", cpu->E |= 1 << 2)
INSTRUCTION(0x1D4, "SET 2,H"    , 2, 0, "----", cpu->H |= 1 << 2)
INSTRUCTION(0x1D5, "SET 2,L"    , 2, 0, "----", cpu->L |= 1 << 2)
INSTRUCTION(0x1D6, "SET 2,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 2; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1D7, "SET 2,A"    , 2, 0, "----", cpu->A |= 1 << 2)
INSTRUCTION(0x1D8, "SET 3,B"    , 2, 0, "----", cpu->B |= 1 << 3)
INSTRUCTION(0x1D9, "SET 3,C"    , 2, 0, "----", cpu->C |= 1 << 3)
INSTRUCTION(0x1DA, "SET 3,D"    , 2, 0, "----", cpu->D |= 1 << 3)
INSTRUCTION(0x1DB, "SET 3,E"    , 2, 0, "----", cpu->E |= 1 << 3)
INSTRUCTION(0x1DC, "SET 3,H"    , 2, 0, "----", cpu->H |= 1 << 3)
INSTRUCTION(0x1DD, "SET 3,L"    , 2, 0, "----", cpu->L |= 1 << 3)
INSTRUCTION(0x1DE, "SET 3,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 3; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1DF, "SET 3,A"    , 2, 0, "----", cpu->A |= 1 << 3)
INSTRUCTION(0x1E0, "SET 4,B"    , 2, 0, "----", cpu->B |= 1 << 4)
INSTRUCTION(0x1E1, "SET 4,C"    , 2, 0, "----", cpu->C |= 1 << 4)
INSTRUCTION(0x1E2, "SET 4,D"    , 2, 0, "----", cpu->D |= 1 << 4)
INSTRUCTION(0x1E3, "SET 4,E"    , 2, 0, "----", cpu->E |= 1 << 4)
INSTRUCTION(0x1E4, "SET 4,H"    , 2, 0, "----", cpu->H |= 1 << 4)
INSTRUCTION(0x1E5, "SET 4,L"    , 2, 0, "----", cpu->L |= 1 << 4)
INSTRUCTION(0x1E6, "SET 4,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 4; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1E7, "SET 4,A"    , 2, 0, "----", cpu->A |= 1 << 4)
INSTRUCTION(0x1E8, "SET 5,B"    , 2, 0, "----", cpu->B |= 1 << 5)
INSTRUCTION(0x1E9, "SET 5,C"    , 2, 0, "----", cpu->C |= 1 << 5)
INSTRUCTION(0x1EA, "SET 5,D"    , 2, 0, "----", cpu->D |= 1 << 5)
INSTRUCTION(0x1EB, "SET 5,E"    , 2, 0, "----", cpu->E |= 1 << 5)
INSTRUCTION(0x1EC, "SET 5,H"    , 2, 0, "----", cpu->H |= 1 << 5)
INSTRUCTION(0x1ED, "SET 5,L"    , 2, 0, "----", cpu->L |= 1 << 5)
INSTRUCTION(0x1EE, "SET 5,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 5; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1EF, "SET 5,A"    , 2, 0, "----", cpu->A |= 1 << 5)
INSTRUCTION(0x1F0, "SET 6,B"    , 2, 0, "----", cpu->B |= 1 << 6)
INSTRUCTION(0x1F1, "SET 6,C"    , 2, 0, "----", cpu->C |= 1 << 6)
INSTRUCTION(0x1F2, "SET 6,D"    , 2, 0, "----", cpu->D |= 1 << 6)
INSTRUCTION(0x1F3, "SET 6,E"    , 2, 0, "----", cpu->E |= 1 << 6)
INSTRUCTION(0x1F4, "SET 6,H"    , 2, 0, "----", cpu->H |= 1 << 6)
INSTRUCTION(0x1F5, "SET 6,L"    , 2, 0, "----", cpu->L |= 1 << 6)
INSTRUCTION(0x1F6, "SET 6,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 6; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1F7, "SET 6,A"    , 2, 0, "----", cpu->A |= 1 << 6)
INSTRUCTION(0x1F8, "SET 7,B"    , 2, 0, "----", cpu->B |= 1 << 7)
INSTRUCTION(0x1F9, "SET 7,C"    , 2, 0, "----", cpu->C |= 1 << 7)
INSTRUCTION(0x1FA, "SET 7,D"    , 2, 0, "----", cpu->D |= 1 << 7)
INSTRUCTION(0x1FB, "SET 7,E"    , 2, 0, "----", cpu->E |= 1 << 7)
INSTRUCTION(0x1FC, "SET 7,H"    , 2, 0, "----", cpu->H |= 1 << 7)
INSTRUCTION(0x1FD, "SET 7,L"    , 2, 0, "----", cpu->L |= 1 << 7)
INSTRUCTION(0x1FE, "SET 7,(HL)" , 2, 1, "----", uint8_t tmp = read(cpu->HL) | 1 << 7; addCycles(1); write(cpu->HL, tmp))
INSTRUCTION(0x1FF, "SET 7,A"    , 2, 0, "----", cpu->A |= 1 << 7)
